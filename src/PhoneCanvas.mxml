<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   width="626"
		   height="330"
		   creationComplete="init()"
		   backgroundColor="#3E413E"
		   backgroundAlpha="0.0"
		   borderStyle="solid"
		   cornerRadius="0"
		   alpha="1.0"
		   xmlns:thirdParty="components.*"
		   x="369.5"
		   y="97">

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectProxy;
			import events.*;

			[Bindable]
			public var conferences:ArrayCollection = new ArrayCollection();

			public var netConnection:NetConnection = null;
			private var incomingNetStream:NetStream = null;
			private var outgoingNetStream:NetStream = null;
			private var publishName:String = null;
			private var mic:Microphone = null;
			private var isConnected:Boolean = false;
			private var muted:Boolean = false;
			private var isRinging:Boolean = false;
			private var isDialing:Boolean = false;
			private var ringSound:Sound = null;
			private var dialSound:Sound = null;
			private var outgoingSound:Sound = null;
			private var errorSound:Sound = null;
			private var req:URLRequest = null;
			private var ringChannel:SoundChannel = null;
			private var dialChannel:SoundChannel = null;
			private var dtmfChannel:SoundChannel = null;
			[Bindable]
			private var isConference:Boolean = false;
			private var isRecord:Boolean = false;

			private var timer:Timer;
			private var elapsed:uint;
			private var timeStamp:uint;

			[@Embed(source = "assets/gray.png")]
			public const gray:Class;

			[@Embed(source = "assets/blue.png")]
			public const blue:Class;

			[@Embed(source = "assets/yellow.png")]
			public const yellow:Class;


			[@Embed(source = "assets/green.png")]
			public const green:Class;

			[@Embed(source = "assets/red.png")]
			public const red:Class;

			[@Embed(source = "assets/microphone.png")]
			public const micActive:Class;

			[@Embed(source = "assets/icon_phone-mute_16x16.png")]
			public const micMute:Class;

			[@Embed(source = "assets/icon_speaker_16x16.png")]
			public const speaker:Class;

			[@Embed(source = "assets/conference_16x16.png")]
			public const conference:Class;

			[@Embed(source = "assets/history.png")]
			public const history:Class;

			[@Embed(source = "assets/icon_record_16x16.png")]
			public const record:Class;

			[@Embed(source = "assets/media_tape.png")]
			public const tape:Class;

			[@Embed(source = "assets/flag_red.png")]
			public const redFlag:Class;

			[@Embed(source = "assets/people-icon.png")]
			public const conferenceIcon:Class;

			[@Embed(source = "assets/mail_16x16.png")]
			public const mail:Class;

			[@Embed(source = "assets/dtmf/0.mp3")]
			public const dtmf0:Class;

			[@Embed(source = "assets/dtmf/1.mp3")]
			public const dtmf1:Class;

			[@Embed(source = "assets/dtmf/2.mp3")]
			public const dtmf2:Class;

			[@Embed(source = "assets/dtmf/3.mp3")]
			public const dtmf3:Class;

			[@Embed(source = "assets/dtmf/4.mp3")]
			public const dtmf4:Class;

			[@Embed(source = "assets/dtmf/5.mp3")]
			public const dtmf5:Class;

			[@Embed(source = "assets/dtmf/6.mp3")]
			public const dtmf6:Class;

			[@Embed(source = "assets/dtmf/7.mp3")]
			public const dtmf7:Class;

			[@Embed(source = "assets/dtmf/8.mp3")]
			public const dtmf8:Class;

			[@Embed(source = "assets/dtmf/9.mp3")]
			public const dtmf9:Class;

			[@Embed(source = "assets/dtmf/hash.mp3")]
			public const dtmfHash:Class;

			[@Embed(source = "assets/dtmf/star.mp3")]
			public const dtmfStar:Class;

			[@Embed(source = "assets/ringing.mp3")]
			private var ringingClass:Class;

			[@Embed(source = "assets/dialing.mp3")]
			private var dialingClass:Class;

			[@Embed(source = "assets/zello/outgoing.mp3")]
			private var outgoingClass:Class;

			[@Embed(source = "assets/zello/error.mp3")]
			private var errorClass:Class;

			[Bindable]
			public var missedCalls:Array;

			[Bindable]
			public var receivedCalls:Array;

			[Bindable]
			public var dialedCalls:Array;

			private var incomingCallObj:Object;
			private var dialedCallObj:Object;

//			[Bindable]
//			public var groupItem:ArrayCollection = null;
//			public var pttGroupHintTmr:Timer = null;
//			private var isPTTOriginator:Boolean = false;
//			private var hasSetupPTT:Boolean = false;
			public var curCall:String = null;

			private function init():void
			{
				this.holdButton.enabled = false;

//				groupItem = new ArrayCollection();
				timer = new Timer(3000, 0);
				timer.addEventListener(TimerEvent.TIMER, timerHandler);

				ringSound = new ringingClass();
				dialSound = new dialingClass();
				outgoingSound = new outgoingClass();
				errorSound = new errorClass();
				initMicrophone();
				missedCalls = new Array();
				receivedCalls = new Array();
				dialedCalls = new Array();
			}


			public function initMicrophone():void
			{
				mic = getMicrophone();

				if (mic == null)
				{
					trace("No available microphone");
				}
				else
				{
					mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
					mic.addEventListener(StatusEvent.STATUS, micStatusHandler);
					mic.codec = SoundCodec.SPEEX;
					mic.setUseEchoSuppression(true);
					mic.setLoopBack(false);
					mic.setSilenceLevel(0, 20000);
					mic.framesPerPacket = 1;
					mic.gain = 55;
					mic.rate = 16;

				}
			}

			private function getMicrophone():Microphone
			{
				var mic:Microphone = Microphone.getEnhancedMicrophone();
				var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
				options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
				options.nonLinearProcessing = true;
				if (null != mic)
					mic.enhancedOptions = options;

				return mic;
			}

			private function micActivityHandler(event:ActivityEvent):void
			{
			}

			private function micStatusHandler(event:StatusEvent):void
			{
				switch (event.code)
				{
					case "Microphone.Muted":
						break;
					case "Microphone.Unmuted":
						break;
					default:
						trace("unknown micStatusHandler event: " + event);
				}
			}

			private function toggleMute():void
			{
				if (isConnected)
				{
					if (!muted)
					{
						if (outgoingNetStream != null)
						{
							outgoingNetStream.close();
							outgoingNetStream = null;
							micIcon.source = micMute;
							muted = true;
						}
					}
					else
					{
						outgoingNetStream = new NetStream(getNetConnection());
						outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
						outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
						outgoingNetStream.attachAudio(mic);
						outgoingNetStream.bufferTime = 0;
						outgoingNetStream.publish(publishName, "live");
						var custom_obj:Object = new Object();
						custom_obj.onPlayStatus = playStatus;
						outgoingNetStream.client = custom_obj;
						micIcon.source = micActive;
						muted = false;
					}
				}
			}

			private function getNetConnection():NetConnection
			{
				return netConnection;
			}

			private function setNetConnection(netConnection:NetConnection):void
			{
				this.netConnection = netConnection;
			}

			private function getPublishName():String
			{
				return publishName;
			}

			private function setPublishName(publishName:String):void
			{
				this.publishName = publishName;
			}

			public function incomingCall(event:IncomingCallEvent):void
			{
				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtIncoming') + (event.name == "" ? event.number : event.name);
				pickupButton.visible = true;
				dialButton.enabled = false;
				clearButton.enabled = true;
				indicatorIcon.source = red;
				if (!isRinging)
				{
					ringChannel = ringSound.play();
					isRinging = true;
				}
				incomingCallObj = new Object();
				incomingCallObj.label = event.name;
				incomingCallObj.data = event.number;
				incomingCallObj.uuid = event.uuid;
				incomingCallObj.time = new Date().toString();
			}

			public function callConnected(netConnection:NetConnection, playName:String, publishName:String):void
			{
				isConnected = true;

				setNetConnection(netConnection);
				setPublishName(publishName);
				incomingNetStream = new NetStream(netConnection);
				//incomingNetStream.bufferTime = 0;
				incomingNetStream.bufferTime = 0.2;
				incomingNetStream.receiveAudio(true);
				incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);


				outgoingNetStream = new NetStream(netConnection);
				//outgoingNetStream.bufferTime = 0;
				outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				outgoingNetStream.attachAudio(mic);

				var custom_obj:Object = new Object();
				custom_obj.onPlayStatus = playStatus;
				incomingNetStream.client = custom_obj;
				outgoingNetStream.client = custom_obj;

				incomingNetStream.play(playName);
				outgoingNetStream.publish(publishName, "live");
	
				volSlider.enabled = true;
				micSlider.enabled = true;

				pickupButton.visible = false;
				dialButton.enabled = false;

				if (isConference)
				{
					transferButton.visible = false;
					holdButton.visible = false;
				}
				else
				{
					transferButton.visible = true;
				}

				indicatorIcon.source = green;
				startTimer();

				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}

			}

			public function isConferenceCall():Boolean
			{
				if (isConnected && isConference)
					return true;
				else
					return false;
			}

			public function callDisconnected(event:CallDisconnectedEvent):void
			{
				if (incomingNetStream != null)
				{
					incomingNetStream.play(false);
				}
				if (outgoingNetStream != null)
				{
					outgoingNetStream.attachAudio(null);
					outgoingNetStream.close();
				}

				isConnected = false;
				if (isConference)
				{

					if (vbox2.visible)
					{
						toggleConferenceList();
					}

					if (conferences.length > 0)
						conferences.removeItemAt(conferences.length - 1);
					isConference = false;
				}
				dialButton.enabled = true;
				clearButton.enabled = false;
				transferButton.visible = false;
				holdButton.visible = false;
				pickupButton.visible = false;
				curCall = '';

				volSlider.enabled = false;
				micSlider.enabled = false;
				if (event.message != "onUaCallFailed")
				{
					statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtHangup');
				}
				else
				{
					statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtCallfailed');
				}
				indicatorIcon.source = gray;
				stopTimer();

				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
				if (muted)
				{
					micIcon.source = micActive;
				}
				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}
			}

			public function missedCall():void
			{

				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtMissed') + incomingCallObj.label;
				isConnected = false;
				dialButton.enabled = true;
				clearButton.enabled = false;
				transferButton.visible = false;
				holdButton.visible = false;
				pickupButton.visible = false;
				indicatorIcon.source = gray;
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
				if (missedCalls.length >= 10)
				{
					missedCalls.pop();
				}
				missedCalls.unshift(incomingCallObj);
				missedCallIndicator.source = redFlag;
			}

			public function recordBoxStatus(isRecording:Boolean):void
			{
				if (isRecording)
				{
					recordIndicator.source = tape;
				}
				else
				{
					recordIndicator.source = null;
				}
			}

			public function mailBoxStatus(isWaiting:Boolean, newMessage:String, oldMessage:String):void
			{
				if (isWaiting)
				{
					voicemail.source = mail;
					voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
				}
				else
				{
					voicemail.source = null;
					voicemail.toolTip = ""
				}
			}

			public function mailBoxCount(newMessage:String, oldMessage:String):void
			{
				voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
			}

			private function netStatus(evt:NetStatusEvent):void
			{

				switch (evt.info.code)
				{

					case "NetStream.Play.StreamNotFound":
						break;

					case "NetStream.Play.Failed":
						parentApplication.rtmp.doStreamStatus("failed");
						break;

					case "NetStream.Play.Start":
						parentApplication.rtmp.doStreamStatus("start");
						break;

					case "NetStream.Play.Stop":
						parentApplication.rtmp.doStreamStatus("stop");
						break;

					case "NetStream.Buffer.Full":
						break;

					default:

				}
			}

			private function asyncErrorHandler(event:AsyncErrorEvent):void
			{
				trace("AsyncErrorEvent: " + event);
			}

			private function playStatus(event:Object):void
			{
			}


			private function doCall():void
			{
				parentApplication.rtmp.doCall(dialnumTxt.text);
				// HARDCODE here!!! Check if the connection is a conference call
				if (int(dialnumTxt.text) >= 3000 && int(dialnumTxt.text) < 4000)
					isConference = true;

				dialButton.enabled = false;
				clearButton.enabled = true;
				indicatorIcon.source = green;
				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtCalling');
				if (!isDialing)
				{
					dialChannel = dialSound.play(0, 10);
					isDialing = true;
				}
				if (dialedCalls.length >= 10)
				{
					dialedCalls.pop();
				}
				dialedCallObj = new Object();
				dialedCallObj.data = dialnumTxt.text;
				dialedCallObj.label = dialnumTxt.text;
				dialedCallObj.time = new Date().toString();
				dialedCalls.unshift(dialedCallObj);
				curCall = dialedCallObj.label;
			}

			public function doCall2(dialNum:String):void
			{
				parentApplication.rtmp.doCall(dialNum);

				dialButton.enabled = false;
				clearButton.enabled = true;
				indicatorIcon.source = green;
				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtCalling');
				if (!isDialing)
				{
					dialChannel = dialSound.play(0, 10);
					isDialing = true;
				}
				if (dialedCalls.length >= 10)
				{
					dialedCalls.pop();
				}
				dialedCallObj = new Object();
				dialedCallObj.data = dialNum;
				dialedCallObj.label = dialNum;
				dialedCallObj.time = new Date().toString();
				dialedCalls.unshift(dialedCallObj);

			}

			public function showTransferBox():void
			{
				var transferBox:TransferBox = new TransferBox();
				PopUpManager.addPopUp(transferBox, this, true);
				PopUpManager.centerPopUp(transferBox);
			}

			public function doTransfer(transNum:String):void
			{
				parentApplication.rtmp.doTransfer(transNum);
			}

			public function doHold():void
			{
				parentApplication.rtmp.doHold(holdButton.label);
				if (holdButton.label == "Hold")
				{
					holdButton.label = "Resume";
				}
				else
				{
					holdButton.label = "Hold";
				}
			}

			private function doHangUp():void
			{
				if (isRecord == true)
				{
					isRecord = false;
					parentApplication.rtmp.record("off");
				}


				parentApplication.rtmp.doHangUp();

				isConnected = false;
				if (isConference)
				{
					if (vbox2.visible)
					{
						toggleConferenceList();
					}

					if (conferences.length > 0)
						conferences.removeItemAt(conferences.length - 1);
					isConference = false;
				}
				dialButton.enabled = true;
				clearButton.enabled = false;
				pickupButton.visible = false;
				transferButton.visible = false;
				holdButton.visible = false;
				volSlider.enabled = false;
				micSlider.enabled = false;
				indicatorIcon.source = gray;
				statusTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.sTxtHangup');

				curCall = '';
				if (parentApplication.evtpttbuf != null)
				{
					parentApplication.evtpttbuf = null;
				}
//				isPTTOriginator = false;

				stopTimer();

				if (muted)
				{
					micIcon.source = micActive;
				}
				if (isDialing)
				{
					dialChannel.stop();
					isDialing = false;
				}
				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}
			}


			private function doAccept():void
			{
				parentApplication.rtmp.doAccept(incomingCallObj.uuid);
				curCall = incomingCallObj.name;

				if (isRinging)
				{
					ringChannel.stop();
					isRinging = false;
				}

				if (receivedCalls.length >= 10)
				{
					receivedCalls.pop();
				}
				receivedCalls.unshift(incomingCallObj);

				dialButton.enabled = false;

			}

			public function doCallChar(chr:String):void
			{
				parentApplication.rtmp.doCallChar(chr);
				dialnumTxt.text += chr;
			}

			public function doClearDialnum():void
			{
				dialnumTxt.text = "";
			}

			public function addChr(chr:String):void
			{
				dialnumTxt.text += chr;
			}

			public function removeChr():void
			{
				var i:int = dialnumTxt.text.length;
				if (i > 0)
				{
					dialnumTxt.text = dialnumTxt.text.substr(0, (i - 1));
				}
			}

			private function changeVolume(event:Event):void
			{
				var st:SoundTransform = incomingNetStream.soundTransform;

				st.volume = (volSlider.value) * .01;
				incomingNetStream.soundTransform = st;
			}

			private function changeMicVolume(event:Event):void
			{
				mic.gain = (micSlider.value)
			}

			public function startTimer():void
			{
				timeStamp = (new Date()).time;
				timer.start();
				elapsed = 0;
			}

			public function stopTimer():void
			{
				timer.stop();
				durationTxt.text = "";
			}

			public function timerHandler(event:TimerEvent):void
			{
				var tmp:uint = timeStamp;
				timeStamp = (new Date()).time;
				elapsed += timeStamp - tmp;

				var ms:uint = elapsed;
				var div:uint = 1000 * 60 * 60;
				var hour:uint = ms / div;
				ms -= hour * div;
				div /= 60;
				var min:uint = ms / div;
				ms -= min * div;
				div /= 60;
				var sec:uint = ms / div;
				ms -= sec * div;

				var tx:String = hour.toString() + ":"
				if (min < 10)
					tx += "0";
				tx += min.toString() + ":";
				if (sec < 10)
					tx += "0";
				tx += sec.toString();

				durationTxt.text = tx;
			}

			private function showHistory():void
			{
				var historyWin:HistoryWindow = new HistoryWindow();
				PopUpManager.addPopUp(historyWin, this, true);
				PopUpManager.centerPopUp(historyWin);

				missedCallIndicator.source = null;
			}


			private function doRecord():void
			{
				if (indicatorIcon.source != green)
					return;

				if (isRecord == false)
				{
					isRecord = true;
					parentApplication.rtmp.record("on");
				}
				else
				{
					isRecord = false;
					parentApplication.rtmp.record("off");
				}
			}

			public function clearLogs(id:String):void
			{
				if (this[id] == null)
				{
					return;
				}

				TextArea(this[id]).text = TextArea(this[id]).text.substr(-1, 40);
			}


			private function pressEnter():void
			{
				if (ESLcmdTxt.text != '')
					parentApplication.socketManager.esl.api(ESLcmdTxt.text);
				ESLcmdTxt.text = '';
				parentApplication.socketManager.esl.api(ESLcmdTxt.text, parentApplication.socketManager.cmdCallback);
			}

			private function ESLcmdTxt_focusInHandler(event:FocusEvent):void
			{
				ESLcmdTxt.setFocus();
				if (ESLcmdTxt.text == ResourceUtil.getInstance().getString('phoneCanvas.esloghint'))
				{
					ESLcmdTxt.text = "";
				}
			}

			private function ESLcmdTxt_focusOutHandler(event:FocusEvent):void
			{
				if (ESLcmdTxt.text == "")
				{
					ESLcmdTxt.text = ResourceUtil.getInstance().getString('phoneCanvas.esloghint');
				}
			}

			public function setConferencesInfo(obj:Object):void
			{
				conferences.addItem(new ObjectProxy(obj));
				if (!vbox2.visible)
				{
					setTimeout(toggleConferenceList, 300);
				}
			}

			public function addConfMember(confSize:int, memid:int, member:String, status:uint):void
			{
				var obj:Object;
				var objmem:Object = new Object();

				if (conferences.length > 0)
				{
					obj = conferences.getItemAt(conferences.length - 1);
					objmem.id = memid;
					objmem.number = member.substr(0, 4);
					objmem.status = status;

					for each (var item:Object in obj.items)
					{
						if (item.number == objmem.number)
						{
							item.status = objmem.status;
							conferences.refresh();
							return;
						}
					}

					obj.items.push(objmem);
					conferences.refresh();
				}
			}

			public function delConfMember(confSize:int, memid:int, member:String):void
			{
				var obj:Object;
				if (conferences.length > 0)
				{
					obj = conferences.getItemAt(conferences.length - 1);
					for (var i:int = 0; i < obj.items.length; i++)
					{
						if (obj.items[i].number == member.substr(0, 4))
						{
							obj.items.splice(i, 1);
							//conferences.itemUpdated(obj);
							conferences.refresh();
						}
					}
				}
			}

			public function changeConfFloor(confSize:int, newid:int, oldid:int):void
			{
				var obj:Object;
				var status:uint;
				var hasFloorChanged:Boolean = false;

				if (conferences.length > 0)
				{
					obj = conferences.getItemAt(conferences.length - 1);
					for (var i:int = 0; i < obj.items.length; i++)
					{
						if (obj.items[i].id == newid)
						{
							status = obj.items[i].status as uint;
							status |= (1);
							obj.items[i].status = status;
							hasFloorChanged = true;
						}
						else if (obj.items[i].id == oldid)
						{
							status = obj.items[i].status as uint;
							status &= ((~0) - 1);
							obj.items[i].status = status;
							hasFloorChanged = true;
						}
					}
					if (hasFloorChanged)
						conferences.refresh();
				}
			}

			public function muteConfMember(id:int, setMute:Boolean = true):void
			{
				var obj:Object;
				var status:uint;

				if (conferences.length > 0)
				{
					obj = conferences.getItemAt(conferences.length - 1);
					for (var i:int = 0; i < obj.items.length; i++)
					{
						if (obj.items[i].id == id)
						{
							status = obj.items[i].status as uint;
							if (!setMute)
								status |= (1 << 3);
							else
								status &= ((~0) - 8);
							obj.items[i].status = status;
							conferences.refresh();
						}
					}
				}
			}

			public function deafConfMember(id:int, setDeaf:Boolean = true):void
			{
				var obj:Object;
				var status:uint;

				if (conferences.length > 0)
				{
					obj = conferences.getItemAt(conferences.length - 1);
					for (var i:int = 0; i < obj.items.length; i++)
					{
						if (obj.items[i].id == id)
						{
							status = obj.items[i].status as uint;
							if (!setDeaf)
								status |= (1 << 2);
							else
								status &= ((~0) - 4);
							obj.items[i].status = status;
							conferences.refresh();
						}
					}
				}
			}

			public function toggleConferenceList():void
			{
				var preHeigth:int = this.height;
				var repeaterTotalHeight:Number = 0;

				for each (var component:Panel in vbox2.getChildren())
				{
					repeaterTotalHeight += component.height;
				}
				if (repeaterTotalHeight == 0)
					return;

				vbox2.visible = !vbox2.visible;

				if (vbox2.visible)
					this.height += repeaterTotalHeight + vbox.getStyle("verticalGap");
				else
					this.height -= repeaterTotalHeight + vbox.getStyle("verticalGap");

				parentApplication.toggleConferenceList(this.height - preHeigth);
			}

			public function getMemStatus(data:Object, offset:int):Boolean
			{
				return Boolean((data as uint) & (1 << offset));
			}

		]]>
	</mx:Script>

	<mx:Style>              
    .footerLinkBar{
	skin: ClassReference(null);	
	}
  </mx:Style>

	<mx:Metadata>
		[Event("change", type="mx.events.Event")]
	</mx:Metadata>


	<mx:SoundEffect id="dtmfOne"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf1}"/>
	<mx:SoundEffect id="dtmfTwo"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf2}"/>
	<mx:SoundEffect id="dtmfThree"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf3}"/>
	<mx:SoundEffect id="dtmfFour"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf4}"/>
	<mx:SoundEffect id="dtmfFive"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf5}"/>
	<mx:SoundEffect id="dtmfSix"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf6}"/>
	<mx:SoundEffect id="dtmfSeven"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf7}"/>
	<mx:SoundEffect id="dtmfEight"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf8}"/>
	<mx:SoundEffect id="dtmfNine"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf9}"/>
	<mx:SoundEffect id="dtmfZero"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmf0}"/>
	<mx:SoundEffect id="dtmfHashEffect"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmfHash}"/>
	<mx:SoundEffect id="dtmfStarEffect"
					target="{this}"
					useDuration="true"
					duration="650"
					autoLoad="true"
					source="{dtmfStar}"/>



	<mx:Button x="12"
			   y="173"
			   label="1"
			   id="cmdOne"
			   click="doCallChar('1');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfOne}"/>
	<mx:Button x="92"
			   y="266"
			   label="#"
			   id="cmdPound"
			   click="doCallChar('#');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfHashEffect}"/>
	<mx:Button x="52"
			   y="266"
			   label="0"
			   id="cmdZero"
			   click="doCallChar('0');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfZero}"/>
	<mx:Button x="12"
			   y="266"
			   label="*"
			   id="cmdStar"
			   click="doCallChar('*');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfStarEffect}"/>
	<mx:Button x="92"
			   y="235"
			   label="9"
			   id="cmdNine"
			   click="doCallChar('9');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfNine}"/>
	<mx:Button x="52"
			   y="235"
			   label="8"
			   id="cmdEight"
			   click="doCallChar('8');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfEight}"/>
	<mx:Button x="92"
			   y="204"
			   label="6"
			   id="cmdSix"
			   click="doCallChar('6');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfSix}"/>
	<mx:Button x="12"
			   y="204"
			   label="4"
			   id="cmdFour"
			   click="doCallChar('4');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfFour}"/>
	<mx:Button x="52"
			   y="173"
			   label="2"
			   id="cmdTwo"
			   click="doCallChar('2');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfTwo}"/>
	<mx:Button x="92"
			   y="173"
			   label="3"
			   id="cmdThree"
			   click="doCallChar('3');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfThree}"/>
	<mx:Button x="52"
			   y="204"
			   label="5"
			   id="cmdFive"
			   click="doCallChar('5');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfFive}"/>
	<mx:Button x="12"
			   y="235"
			   label="7"
			   id="cmdSeven"
			   click="doCallChar('7');"
			   width="35"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   mouseDownEffect="{dtmfSeven}"/>
	<mx:Button x="32"
			   y="297"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.clear')}"
			   id="cmdClear"
			   click="doClearDialnum();"
			   width="75"
			   height="23"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FFFFFF, #BCBCBC]"
			   color="#484848"
			   fontSize="11"/>
	<mx:Canvas x="12.5"
			   y="10"
			   width="239"
			   height="118"
			   borderStyle="solid"
			   cornerRadius="10"
			   backgroundColor="#F0F7FE"
			   borderColor="#191919"
			   borderThickness="1"
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off">
		<mx:Text x="69"
				 y="2"
				 width="158"
				 color="#FF0000"
				 id="statusTxt"
				 fontSize="12"
				 textAlign="right"
				 fontWeight="bold"
				 fontFamily="Courier New"/>
		<mx:Text x="10"
				 y="30"
				 width="217"
				 id="dialnumTxt"
				 fontWeight="normal"
				 fontSize="13"
				 fontFamily="Verdana"/>
		<mx:Text x="136"
				 y="86"
				 width="91"
				 id="durationTxt"
				 textAlign="right"
				 fontWeight="bold"
				 fontStyle="italic"
				 fontSize="11"/>
		<mx:Image x="22"
				  y="87"
				  id="missedCallIndicator"
				  width="16"
				  height="16"/>
		<mx:Image x="56"
				  y="87"
				  width="16"
				  height="16"
				  id="voicemail"/>
		<mx:Image x="90"
				  y="87"
				  width="16"
				  height="16"
				  id="recordIndicator"/>
		<mx:Text x="10"
				 y="2"
				 width="51"
				 id="registerTxt"
				 color="#20ED16"
				 fontWeight="bold"
				 fontSize="14"/>
	</mx:Canvas>
	<mx:Button x="135"
			   y="205"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.dial')}"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#03CDFF, #0156A5]"
			   click="doCall()"
			   color="#FFFFFF"
			   id="dialButton"
			   width="74"
			   themeColor="#0156A5"
			   fontSize="10"/>
	<mx:Button x="135"
			   y="236"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.hangup')}"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#FF5A00, #B44001]"
			   click="doHangUp()"
			   color="#FFFFFF"
			   enabled="false"
			   id="clearButton"
			   width="74"
			   themeColor="#B44001"
			   fontSize="10"/>
	<mx:Button x="135"
			   y="267"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.answer')}"
			   visible="false"
			   fillAlphas="[1.0, 1.0]"
			   fillColors="[#03CDFF, #0156A5]"
			   click="doAccept()"
			   color="#FFFFFF"
			   id="pickupButton"
			   width="74"
			   borderColor="#222222"
			   alpha="1.0"
			   themeColor="#0156A5"/>
	<mx:Image x="214"
			  y="178"
			  source="{speaker}"/>
	<mx:Image id="micIcon"
			  x="242"
			  y="178"
			  toolTip="{ResourceUtil.getInstance().getString('phoneCanvas.micicontip')}"
			  click="toggleMute()"
			  source="{micActive}"/>
	<mx:VSlider id="micSlider"
				x="239"
				y="205"
				height="84"
				minimum="0"
				maximum="100"
				value="40"
				allowTrackClick="true"
				liveDragging="true"
				thumbDrag="changeMicVolume(event)"
				enabled="false"/>
	<mx:VSlider id="volSlider"
				x="212"
				y="205"
				height="84"
				minimum="0"
				maximum="100"
				value="40"
				allowTrackClick="true"
				liveDragging="true"
				thumbDrag="changeVolume(event)"
				enabled="false"/>

	<mx:Image x="187"
			  y="178"
			  source="{gray}"
			  id="indicatorIcon"/>
	<mx:Image x="137"
			  y="178"
			  source="{history}"
			  click="showHistory()"
			  toolTip="{ResourceUtil.getInstance().getString('phoneCanvas.historytip')}"/>
	<mx:Image x="162"
			  y="178"
			  source="{record}"
			  click="doRecord()"
			  toolTip="{ResourceUtil.getInstance().getString('phoneCanvas.recordtip')}"/>

	<mx:Button x="135"
			   y="267"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.transfer')}"
			   id="transferButton"
			   click="showTransferBox()"
			   visible="false"
			   width="74"/>
	<mx:Button x="135"
			   y="298"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.hold')}"
			   id="holdButton"
			   click="doHold()"
			   visible="false"
			   width="74"
			   fillAlphas="[1.0, 1.0]"/>
	<mx:Button x="173"
			   y="135"
			   label="{ResourceUtil.getInstance().getString('phoneCanvas.logsunfold')}"
			   id="logsButton"
			   click="parentApplication.toggleLogs()"
			   width="78.5"
			   fontSize="12"
			   height="25"
			   textAlign="center"
			   paddingBottom="0"
			   paddingLeft="0"
			   paddingRight="0"
			   paddingTop="0"/>
	<mx:TabNavigator x="270"
					 y="10"
					 width="352"
					 height="99%"
					 id="logTn"
					 creationPolicy="all"
					 fontSize="11">
		<mx:Panel id="rtmpLogPanel"
				  label="{ResourceUtil.getInstance().getString('phoneCanvas.rtmplog')}"
				  width="100%"
				  height="100%"
				  layout="absolute">
			<mx:TextArea width="326"
						 height="{rtmpLogPanel.height-100}"
						 id="rtmpLogBox"
						 x="0"
						 y="2"/>
			<mx:Button label="{ResourceUtil.getInstance().getString('phoneCanvas.clearlog')}"
					   x="251"
					   bottom="20"
					   click="clearLogs('rtmpLogBox')"
					   fontSize="11"
					   width="75"/>
		</mx:Panel>
		<mx:Panel id="esLogPanel"
				  label="{ResourceUtil.getInstance().getString('phoneCanvas.eslog')}"
				  width="100%"
				  height="100%"
				  layout="absolute">
			<mx:TextArea width="326"
						 height="{esLogPanel.height-100}"
						 id="eslLogBox"
						 x="0"
						 y="2"/>
			<mx:TextInput x="10"
						  bottom="20"
						  width="236"
						  id="ESLcmdTxt"
						  enter="pressEnter()"
						  focusIn="ESLcmdTxt_focusInHandler(event)"
						  focusOut="ESLcmdTxt_focusOutHandler(event)"
						  text="{ResourceUtil.getInstance().getString('phoneCanvas.esloghint')}"/>
			<mx:Button label="{ResourceUtil.getInstance().getString('phoneCanvas.clearlog')}"
					   x="254"
					   bottom="20"
					   click="clearLogs('eslLogBox')"/>
		</mx:Panel>

	</mx:TabNavigator>

	<mx:Array id="arr">
		<mx:Object label="{ResourceUtil.getInstance().getString('phoneCanvas.hear')}"
				   ico="{blue}"/>
		<mx:Object label="{ResourceUtil.getInstance().getString('phoneCanvas.speak')}"
				   ico="{yellow}"/>
		<mx:Object label="{ResourceUtil.getInstance().getString('phoneCanvas.floor')}"
				   ico="{red}"/>
	</mx:Array>
	<mx:Button id="confBtn"
			   x="112.5"
			   y="136"
			   click="toggleConferenceList()"
			   toolTip="{ResourceUtil.getInstance().getString('phoneCanvas.confbtntip')}"
			   icon="{conferenceIcon}"
			   width="40"
			   visible="{isConference}"
			   height="25"/>

	<mx:VBox id="vbox"
			 width="265"
			 height="100%"
			 x="0"
			 y="328">
		<mx:VBox id="vbox2"
				 width="265"
				 height="100%"
				 x="251"
				 y="326"
				 includeInLayout="{vbox2.visible}"
				 creationComplete="vbox2.visible = false">
			<!--
	   <mx:Repeater id="rconf" dataProvider="{conferences}">
	   -->
			<mx:Panel width="100%"
					  title="{ResourceUtil.getInstance().getString('phoneCanvas.conf')} {conferences.getItemAt(0).header}"
					  status="{conferences.getItemAt(0).items.length} {ResourceUtil.getInstance().getString('phoneCanvas.total')}"
					  styleName="opaquePanel">
				<mx:List id="list"
						 rowCount="8"
						 dataProvider="{conferences.getItemAt(0).items}"
						 alternatingItemColors="[#EEEEEE, white]"
						 width="100%">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox horizontalGap="0">
								<mx:Label text="{data.number}"/>
								<mx:Spacer width="100%"/>
								<mx:Image source="{outerDocument.red}"
										  visible="{outerDocument.getMemStatus(data.status,0)}"
										  includeInLayout="{outerDocument.getMemStatus(data.status,0)}"/>
								<!--
								<mx:Image source="{outerDocument.gray}" visible="{outerDocument.getMemStatus(data.status,1)}" includeInLayout="{outerDocument.getMemStatus(data.status,1)}"/>
								-->
								<mx:Image source="{outerDocument.blue}"
										  visible="{outerDocument.getMemStatus(data.status,2)}"
										  includeInLayout="{outerDocument.getMemStatus(data.status,2)}"/>
								<mx:Image source="{outerDocument.yellow}"
										  visible="{outerDocument.getMemStatus(data.status,3)}"
										  includeInLayout="{outerDocument.getMemStatus(data.status,3)}"/>
								<!--
								<mx:Image source="{outerDocument.green}" visible="{outerDocument.getMemStatus(data.status,4)}" includeInLayout="{outerDocument.getMemStatus(data.status,4)}"/>
								-->
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
				<mx:Box width="100%"
						horizontalAlign="center">
					<mx:LinkBar linkButtonStyleName="footerLinkBar"
								dataProvider="{arr}"
								iconField="ico"/>
				</mx:Box>
			</mx:Panel>
			<!--
		</mx:Repeater>
		-->
		</mx:VBox>
	</mx:VBox>
</mx:Canvas>

